import React, { useState, useEffect } from 'react';
import { StyleSheet, View, Text, SafeAreaView, Image, TouchableOpacity, ScrollView, ActivityIndicator, FlatList, RefreshControl } from 'react-native';
import { useNavigation, useRouter } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import { supabase } from "../../supabase/supabaseClient";
import Header from '../components/Header';

const API_BASE = "http://192.168.254.114:3000/api";
const API_ORIGIN = API_BASE.replace(/\/api$/, "");

const GalleryScreen = () => {
  const navigation = useNavigation();
  const router = useRouter();
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [curatedArtworks, setCuratedArtworks] = useState([]);
  const [recentlyAdded, setRecentlyAdded] = useState([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [totalArtworks, setTotalArtworks] = useState(0);

  const loadSession = async () => {
    const { data } = await supabase.auth.getSession();
    return {
      at: data?.session?.access_token || null,
      rt: data?.session?.refresh_token || null,
    };
  };

  const fetchCategories = async () => {
    try {
      const { at, rt } = await loadSession();
      const res = await fetch(`${API_BASE}/gallery/getCategories`, {
        method: 'GET',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json', Cookie: `access_token=${at}; refresh_token=${rt}` },
      });
      const data = await res.json();
      if (data.success && data.categories) {
        const allCategory = { field: 'all', name: 'All', count: data.totalCount || 0 };
        setCategories([allCategory, ...data.categories]);
      }
    } catch (error) {
      console.error('Error fetching categories:', error);
    }
  };

  const fetchArtworks = async (categoryFilter = 'all') => {
    try {
      const { at, rt } = await loadSession();
      const queryParams = new URLSearchParams();
      if (categoryFilter !== 'all') {
        queryParams.append('categories', categoryFilter);
      }
      queryParams.append('page', '1');
      queryParams.append('limit', '50');
      
      const res = await fetch(`${API_BASE}/gallery/artworks?${queryParams}`, {
        method: 'GET',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json', Cookie: `access_token=${at}; refresh_token=${rt}` },
      });
      const data = await res.json();
      
      if (data.success && data.artworks) {
        // Curated Collection: Featured artworks first
        const featured = data.artworks.filter(art => art.featured === true).slice(0, 6);
        setCuratedArtworks(featured.length > 0 ? featured : data.artworks.slice(0, 6));
        
        // Recently Added: Latest artworks (using datePosted from controller)
        const sorted = [...data.artworks].sort((a, b) => 
          new Date(b.datePosted || 0) - new Date(a.datePosted || 0)
        );
        setRecentlyAdded(sorted.slice(0, 6));
        
        // Store total count
        setTotalArtworks(data.totalCount || data.artworks.length);
      }
    } catch (error) {
      console.error('Error fetching artworks:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCategories();
    fetchArtworks();
  }, []);

  const handleCategoryChange = (categoryField, categoryName) => {
    setSelectedCategory(categoryField);
    setLoading(true);
    // If "All" is selected, send 'all', otherwise send the category name
    const filterValue = categoryField === 'all' ? 'all' : categoryName;
    fetchArtworks(filterValue);
  };

  const onRefresh = async () => {
    setRefreshing(true);
    try {
      await Promise.all([
        fetchCategories(),
        fetchArtworks(selectedCategory === 'all' ? 'all' : categories.find(c => c.field === selectedCategory)?.name)
      ]);
    } catch (error) {
      console.error('Refresh error:', error);
    } finally {
      setRefreshing(false);
    }
  };

  const resolveImageUrl = (imageData) => {
    if (!imageData) return null;
    // Handle array of images (get first image)
    const imageUrl = Array.isArray(imageData) ? imageData[0] : imageData;
    if (!imageUrl) return null;
    return imageUrl.startsWith('http') ? imageUrl : `${API_ORIGIN}${imageUrl}`;
  };

  const renderArtworkCard = (item) => (
    <TouchableOpacity 
      style={styles.card} 
      key={item.id}
      onPress={() => {
        console.log('Navigating to artwork:', item.id, 'Full item:', item);
        router.push(`/viewGallery?artworkId=${item.id}`);
      }}
    >
      <Image 
        source={{ uri: resolveImageUrl(item.image) }} 
        style={styles.cardImage}
        defaultSource={require('../../assets/icon.png')}
      />
      <Text style={styles.cardTitle} numberOfLines={1}>{item.title || 'Untitled'}</Text>
      <Text style={styles.cardAuthor} numberOfLines={1}>by {item.artist || 'Unknown Artist'}</Text>
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={styles.container}>
      <Header title="Gallery" showSearch={false} />

      <ScrollView 
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={['#A68C7B']}
            tintColor="#A68C7B"
          />
        }
      >
        {/* Filter Collection (Categories) */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Filter Collection</Text>
          <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.filterScroll}>
            {categories.map((category) => (
              <TouchableOpacity
                key={category.field}
                style={[
                  styles.filterChip,
                  selectedCategory === category.field && styles.filterChipActive
                ]}
                onPress={() => handleCategoryChange(category.field, category.name)}
              >
                <Text style={[
                  styles.filterChipText,
                  selectedCategory === category.field && styles.filterChipTextActive
                ]}>
                  {category.name} ({category.count || 0})
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        {loading ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color="#A68C7B" />
          </View>
        ) : (
          <>
            {/* Empty State */}
            {recentlyAdded.length === 0 && curatedArtworks.length === 0 ? (
              <View style={styles.emptyContainer}>
                <Ionicons name="image-outline" size={64} color="#A68C7B" style={{ marginBottom: 16 }} />
                <Text style={styles.emptyTitle}>No Artworks Found</Text>
                <Text style={styles.emptyMessage}>
                  There are no artworks in this category yet.
                </Text>
                <TouchableOpacity 
                  style={styles.emptyButton}
                  onPress={() => handleCategoryChange('all', 'All')}
                >
                  <Text style={styles.emptyButtonText}>View All Artworks</Text>
                </TouchableOpacity>
              </View>
            ) : (
              <>
                {/* Recently Added */}
                {recentlyAdded.length > 0 && (
                  <View style={styles.section}>
                    <Text style={styles.sectionTitle}>Recently Added</Text>
                    <View style={styles.cardGrid}>
                      {recentlyAdded.map(renderArtworkCard)}
                    </View>
                  </View>
                )}

                {/* Curated Collection */}
                {curatedArtworks.length > 0 && (
                  <View style={styles.section}>
                    <Text style={styles.sectionTitle}>Curated Collection</Text>
                    <View style={styles.cardGrid}>
                      {curatedArtworks.map(renderArtworkCard)}
                    </View>
                  </View>
                )}
                
                {/* End of Collection Message */}
                <View style={styles.dividerContainer}>
                  <View style={styles.dividerLine} />
                </View>
                <View style={styles.endOfCollection}>
                  <Ionicons name="checkmark-circle" size={48} color="#A68C7B" />
                  <Text style={styles.endTitle}>You've reached the end of the collection</Text>
                  <Text style={styles.endMessage}>Showing all {totalArtworks} {totalArtworks === 1 ? 'artwork' : 'artworks'}</Text>
                </View>
              </>
            )}
          </>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff' },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginHorizontal: 15,
    marginTop: 15,
    marginBottom: 10,
    color: '#A68C7B',
  },
  filterScroll: {
    marginHorizontal: 15,
  },
  filterChip: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    backgroundColor: '#f5f5f5',
    borderRadius: 20,
    marginRight: 10,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  filterChipActive: {
    backgroundColor: '#A68C7B',
    borderColor: '#A68C7B',
  },
  filterChipText: {
    fontSize: 14,
    color: '#666',
  },
  filterChipTextActive: {
    color: '#fff',
    fontWeight: '600',
  },
  cardGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    marginHorizontal: 15,
  },
  card: {
    width: '48%',
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 8,
    marginBottom: 15,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 4,
    elevation: 3,
  },
  cardImage: {
    width: '100%',
    height: 120,
    borderRadius: 8,
    marginBottom: 8,
    backgroundColor: '#f0f0f0',
  },
  cardTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#000',
    marginBottom: 2,
  },
  cardAuthor: {
    fontSize: 12,
    color: '#A68C7B',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 40,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
    paddingHorizontal: 30,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#A68C7B',
    marginBottom: 8,
    textAlign: 'center',
  },
  emptyMessage: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    marginBottom: 24,
    lineHeight: 20,
  },
  emptyButton: {
    backgroundColor: '#A68C7B',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 25,
  },
  emptyButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  dividerContainer: {
    paddingHorizontal: 30,
    marginTop: 20,
    marginBottom: 10,
  },
  dividerLine: {
    height: 1,
    backgroundColor: '#e0e0e0',
  },
  endOfCollection: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 40,
    paddingHorizontal: 30,
    marginBottom: 20,
  },
  endTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#A68C7B',
    marginTop: 12,
    marginBottom: 8,
    textAlign: 'center',
  },
  endMessage: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
  },
});

export default GalleryScreen;
