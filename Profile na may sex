import React, { useState, useCallback, useEffect } from "react";
import {
  View,
  Text,
  Image,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  Modal,
  TextInput,
  Platform,
  KeyboardAvoidingView,
  TouchableWithoutFeedback,
  Keyboard,
} from "react-native";
import * as ImagePicker from "expo-image-picker";
import { useFocusEffect } from "expo-router";
import AsyncStorage from "@react-native-async-storage/async-storage";
import DateTimePicker from "@react-native-community/datetimepicker";
import Header from "../components/Header";
import Icon from "react-native-vector-icons/FontAwesome";
import { supabase } from "../../supabase/supabaseClient";

const API_BASE = "http://192.168.18.22:3000/api";
const API_ORIGIN = API_BASE.replace(/\/api$/, "");

export default function ProfileScreen() {
  const [modalVisible, setModalVisible] = useState(false);
  const [firstName, setFirstName] = useState("");
  const [middleName, setMiddleName] = useState("");
  const [lastName, setLastName] = useState("");
  const [userNameField, setUserNameField] = useState("");
  const [username, setUsername] = useState("");
  const [sex, setSex] = useState("");
  const [birthday, setBirthday] = useState(new Date());
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [showSexDropdown, setShowSexDropdown] = useState(false);
  const [address, setAddress] = useState("");
  const [bio, setBio] = useState("");
  const [about, setAbout] = useState("");
  const [image, setImage] = useState(null);
  const [backgroundImage, setBackgroundImage] = useState(null);
  const [selectedImage, setSelectedImage] = useState(null);
  const [tempImage, setTempImage] = useState(null);
  const [tempBackgroundImage, setTempBackgroundImage] = useState(null);
  const formattedDate = birthday ? birthday.toLocaleDateString("en-US") : "";
  const [accessToken, setAccessToken] = useState(null);
  const [refreshToken, setRefreshToken] = useState(null);

  // Initialize session and load stored birthday
  useEffect(() => {
    const init = async () => {
      try {
        const { data } = await supabase.auth.getSession();
        const at = data?.session?.access_token || null;
        const rt = data?.session?.refresh_token || null;
        setAccessToken(at);
        setRefreshToken(rt);

        // Load saved birthday from AsyncStorage
        const savedBirthday = await AsyncStorage.getItem("userBirthday");
        if (savedBirthday) {
          setBirthday(new Date(savedBirthday));
        }

        if (at && rt) {
          await fetchProfile(at, rt);
        }
      } catch (e) {
        console.warn("Failed to initialize session", e?.message || e);
      }
    };
    init();
  }, []);

  const getAuthHeaders = async () => {
    try {
      const keys = [
        "token",
        "access_token",
        "accessToken",
        "jwt",
        "authToken",
        "refresh_token",
        "refreshToken",
      ];
      const pairs = await AsyncStorage.multiGet(keys);
      const map = Object.fromEntries(pairs);
      const access =
        map.token ||
        map.access_token ||
        map.accessToken ||
        map.jwt ||
        map.authToken;
      const refresh = map.refresh_token || map.refreshToken;
      const headers = {};
      if (access) {
        headers.Authorization = `Bearer ${access}`;
        headers["x-access-token"] = access;
      }
      if (access || refresh) {
        const cookieParts = [];
        if (access) cookieParts.push(`access_token=${access}`);
        if (refresh) cookieParts.push(`refresh_token=${refresh}`);
        if (cookieParts.length) headers.Cookie = cookieParts.join("; ");
      }
      return headers;
    } catch (e) {
      console.warn("Auth header lookup failed:", e);
      return {};
    }
  };

  const getInitials = () => {
    const parts = [firstName, middleName, lastName].filter(Boolean);
    let base = parts.join(" ");
    if (!base && username) base = username;
    if (!base) return "";
    const tokens = base.trim().split(/\s+/);
    const initials = tokens
      .slice(0, 2)
      .map((t) => t[0]?.toUpperCase())
      .join("");
    return initials || "";
  };

  const fetchProfile = async (at = accessToken, rt = refreshToken) => {
    try {
      const res = await fetch(`${API_BASE}/profile/getProfile`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Cookie: `access_token=${at}; refresh_token=${rt}`,
        },
      });
      if (!res.ok) {
        const text = await res.text();
        console.warn("getProfile response", { status: res.status, body: text });
        throw new Error(`Failed to fetch profile (${res.status})`);
      }
      const data = await res.json();
      const p = data?.profile ?? data;
      const resolveUrl = (u) => {
        if (!u) return null;
        if (typeof u !== "string") return null;
        return u.startsWith("http://") || u.startsWith("https://")
          ? u
          : `${API_ORIGIN}${u.startsWith("/") ? "" : "/"}${u}`;
      };
      setFirstName(p.firstName || "");
      setMiddleName(p.middleName || "");
      setLastName(p.lastName || "");
      setUserNameField(p.username || "");
      setUsername(p.username || "");
      setSex(p.sex || "");
      setAddress(p.address || "");
      setBio(p.bio || "");
      setAbout(p.about || "");

      if (p.birthday) {
        const parsedDate = new Date(p.birthday);
        setBirthday(parsedDate);
        await AsyncStorage.setItem("userBirthday", parsedDate.toISOString());
      }

      const rawAvatar = p.profilePicture;
      const rawCover = p.coverPicture;
      const avatarUrl = resolveUrl(rawAvatar);
      const coverUrl = resolveUrl(rawCover);
      setImage(avatarUrl ? { uri: avatarUrl } : null);
      setBackgroundImage(coverUrl ? { uri: coverUrl } : null);
    } catch (err) {
      alert("Could not load profile info");
      console.error(err);
    }
  };

  useFocusEffect(
    useCallback(() => {
      fetchProfile();
    }, [])
  );

  const pickImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });
    if (!result.canceled) {
      const uri = result.assets[0].uri;
      const imgObj = { uri };
      setTempImage(imgObj);
      setImage(imgObj);
    }
  };

  const pickBackgroundImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [16, 9],
      quality: 1,
    });
    if (!result.canceled) {
      const uri = result.assets[0].uri;
      const bgObj = { uri };
      setTempBackgroundImage(bgObj);
      setBackgroundImage(bgObj);
    }
  };

  const handleSave = async () => {
    try {
      const formData = new FormData();
      if (tempImage) {
        const filename = tempImage.uri.split("/").pop();
        const match = /\.(\w+)$/.exec(filename);
        const type = match ? `image/${match[1]}` : `image`;
        formData.append("avatar", {
          uri: tempImage.uri,
          name: filename,
          type,
        });
      }
      if (tempBackgroundImage) {
        const filename = tempBackgroundImage.uri.split("/").pop();
        const match = /\.(\w+)$/.exec(filename);
        const type = match ? `image/${match[1]}` : `image`;
        formData.append("cover", {
          uri: tempBackgroundImage.uri,
          name: filename,
          type,
        });
      }
      formData.append("firstName", firstName);
      formData.append("middleName", middleName);
      formData.append("lastName", lastName);
      formData.append("username", userNameField || username);
      formData.append("sex", sex);
      formData.append("birthday", birthday.toISOString());
      formData.append("address", address);
      formData.append("bio", bio);
      formData.append("about", about);

      await AsyncStorage.setItem("userBirthday", birthday.toISOString());

      const res = await fetch(`${API_BASE}/profile/updateProfile`, {
        method: "POST",
        headers: {
          Cookie: `access_token=${accessToken}; refresh_token=${refreshToken}`,
        },
        body: formData,
      });
      if (!res.ok) throw new Error("Failed to update profile");

      setModalVisible(false);
      setTempImage(null);
      setTempBackgroundImage(null);
      fetchProfile();
      alert("Profile updated!");
    } catch (err) {
      alert("Failed to save profile information");
      console.error(err);
    }
  };

  const onChangeDate = (event, selectedDate) => {
    if (selectedDate) {
      setBirthday(selectedDate);
      AsyncStorage.setItem("userBirthday", selectedDate.toISOString());
    }
    if (Platform.OS === "android") setShowDatePicker(false);
  };

  return (
    <ScrollView style={styles.container}>
      <Header title="Profile" showSearch={false} />
      <View style={styles.profileSection}>
        {backgroundImage ? (
          <Image source={backgroundImage} style={styles.backgroundImage} />
        ) : (
          <Image
            source={require("../../assets/pic1.jpg")}
            style={styles.backgroundImage}
          />
        )}
        <View style={styles.avatarContainer}>
          {image ? (
            <Image source={image} style={styles.avatar} />
          ) : (
            <View
              style={[
                styles.avatar,
                styles.placeholderCircle,
                { backgroundColor: "#dfe3e8" },
              ]}
            >
              {getInitials() ? (
                <Text
                  style={{ fontSize: 32, fontWeight: "bold", color: "#555" }}
                >
                  {getInitials()}
                </Text>
              ) : (
                <Icon name="user" size={50} color="#999" />
              )}
            </View>
          )}
        </View>
        <Text style={styles.name}>{username || "Username"}</Text>
        <Text style={styles.detail}>Sex: {sex}</Text>
        <Text style={styles.detail}>Birthday: {formattedDate}</Text>
        <Text style={styles.detail}>Address: {address}</Text>
        <Text style={styles.detail}>Bio: {bio}</Text>
        <View style={styles.buttonRow}>
          <TouchableOpacity
            style={styles.button}
            onPress={() => {
              setTempImage(image);
              setTempBackgroundImage(backgroundImage);
              setModalVisible(true);
            }}
          >
            <Text style={styles.buttonText}>Edit Profile</Text>
          </TouchableOpacity>
        </View>
      </View>
      <View style={styles.aboutBox}>
        <Text style={styles.aboutText}>{about}</Text>
      </View>
      <Text style={styles.sectionTitle}>Artwork Galleries</Text>
      <ScrollView
        horizontal
        showsHorizontalScrollIndicator={false}
        style={styles.galleryRow}
      >
        {[
          require("../../assets/pic1.jpg"),
          require("../../assets/pic1.jpg"),
          require("../../assets/pic1.jpg"),
        ].map((img, index) => (
          <TouchableOpacity key={index} onPress={() => setSelectedImage(img)}>
            <Image source={img} style={styles.galleryItem} />
          </TouchableOpacity>
        ))}
      </ScrollView>
      <Modal
        visible={selectedImage !== null}
        transparent
        animationType="fade"
        onRequestClose={() => setSelectedImage(null)}
      >
        <TouchableOpacity
          style={styles.fullScreenContainer}
          onPress={() => setSelectedImage(null)}
          activeOpacity={1}
        >
          <Image
            source={selectedImage}
            style={styles.fullScreenImage}
            resizeMode="contain"
          />
        </TouchableOpacity>
      </Modal>

      {/* EDIT PROFILE MODAL */}
      <Modal visible={modalVisible} animationType="fade" transparent>
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <View style={styles.modalOverlay}>
            <KeyboardAvoidingView
              behavior={Platform.OS === "ios" ? "padding" : "height"}
              style={styles.keyboardView}
            >
              <ScrollView
                contentContainerStyle={styles.modalBox}
                keyboardShouldPersistTaps="handled"
              >
                <Text style={styles.modalTitle}>Edit Profile</Text>
                <TouchableOpacity onPress={pickImage} style={styles.imagePicker}>
                  {tempImage ? (
                    <Image source={tempImage} style={styles.avatarEdit} />
                  ) : (
                    <View style={[styles.avatarEdit, styles.placeholderCircle]}>
                      <Icon name="user" size={40} color="#999" />
                    </View>
                  )}
                  <Text style={styles.changePhotoText}>Change Photo</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  onPress={pickBackgroundImage}
                  style={styles.imagePicker}
                >
                  <View style={styles.backgroundPreviewContainer}>
                    {tempBackgroundImage ? (
                      <Image
                        source={{ uri: tempBackgroundImage.uri }}
                        style={styles.backgroundPreviewImage}
                        resizeMode="cover"
                      />
                    ) : (
                      <View
                        style={[
                          styles.backgroundPreviewImage,
                          styles.placeholderCircle,
                        ]}
                      >
                        <Icon name="image" size={40} color="#999" />
                      </View>
                    )}
                  </View>
                  <Text style={styles.changePhotoText}>
                    Change Background Photo
                  </Text>
                </TouchableOpacity>

                <TextInput
                  style={styles.input}
                  placeholder="First Name"
                  placeholderTextColor="#999"
                  value={firstName}
                  onChangeText={setFirstName}
                />
                <TextInput
                  style={styles.input}
                  placeholder="Middle Name"
                  placeholderTextColor="#999"
                  value={middleName}
                  onChangeText={setMiddleName}
                />
                <TextInput
                  style={styles.input}
                  placeholder="Last Name"
                  placeholderTextColor="#999"
                  value={lastName}
                  onChangeText={setLastName}
                />
                <TextInput
                  style={styles.input}
                  placeholder="Username"
                  placeholderTextColor="#999"
                  value={userNameField}
                  onChangeText={setUserNameField}
                />

                <View style={styles.inputContainer}>
                  <TouchableOpacity
                    style={styles.input}
                    onPress={() => setShowSexDropdown(!showSexDropdown)}
                    activeOpacity={0.8}
                  >
                    <Text style={{ color: sex ? "#000" : "#999" }}>
                      {sex || "Select Sex"}
                    </Text>
                    <Icon
                      name={showSexDropdown ? "angle-up" : "angle-down"}
                      size={20}
                      color="#555"
                      style={{ position: "absolute", right: 10, top: 12 }}
                    />
                  </TouchableOpacity>
                  {showSexDropdown && (
                    <View style={styles.dropdownList}>
                      {["Male", "Female", "Others"].map((item) => (
                        <TouchableOpacity
                          key={item}
                          style={styles.dropdownItem}
                          onPress={() => {
                            setSex(item);
                            setShowSexDropdown(false);
                          }}
                        >
                          <Text style={styles.dropdownItemText}>{item}</Text>
                        </TouchableOpacity>
                      ))}
                    </View>
                  )}
                </View>

                <TouchableOpacity
                  style={styles.input}
                  onPress={() => setShowDatePicker(true)}
                >
                  <Text style={{ color: birthday ? "#000" : "#888" }}>
                    {birthday
                      ? `Birthday: ${formattedDate}`
                      : "Select your birthday"}
                  </Text>
                </TouchableOpacity>
                {showDatePicker && (
                  <DateTimePicker
                    value={birthday}
                    mode="date"
                    display="default"
                    onChange={onChangeDate}
                  />
                )}

                <TextInput
                  style={styles.input}
                  placeholder="Enter your address"
                  placeholderTextColor="#999"
                  value={address}
                  onChangeText={setAddress}
                />
                <TextInput
                  style={styles.input}
                  placeholder="Enter your bio"
                  placeholderTextColor="#999"
                  value={bio}
                  onChangeText={setBio}
                />
                <TextInput
                  style={[styles.input, { height: 80 }]}
                  placeholder="Write something about yourself"
                  placeholderTextColor="#999"
                  multiline
                  value={about}
                  onChangeText={setAbout}
                />
                <View style={styles.modalButtons}>
                  <TouchableOpacity
                    style={styles.cancelButton}
                    onPress={() => setModalVisible(false)}
                  >
                    <Text style={styles.cancelButtonText}>Cancel</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={styles.saveButton}
                    onPress={handleSave}
                  >
                    <Text style={styles.saveButtonText}>Save</Text>
                  </TouchableOpacity>
                </View>
              </ScrollView>
            </KeyboardAvoidingView>
          </View>
        </TouchableWithoutFeedback>
      </Modal>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#fff" },
  profileSection: { alignItems: "center", marginTop: 10, padding: 0 },
  backgroundImage: {
    width: "100%",
    height: 150,
    borderTopLeftRadius: 15,
    borderTopRightRadius: 15,
    resizeMode: "cover",
    marginBottom: -50,
  },
  avatarContainer: { position: "relative", top: -50, alignItems: "center" },
  avatar: {
    width: 100,
    height: 100,
    borderRadius: 50,
    borderWidth: 3,
    borderColor: "#fff",
  },
  name: { fontSize: 20, fontWeight: "bold", marginTop: -30 },
  detail: { fontSize: 14, color: "#444", textAlign: "center", marginVertical: 2 },
  buttonRow: { flexDirection: "row", marginTop: 10 },
  button: {
    backgroundColor: "#eee",
    paddingVertical: 8,
    paddingHorizontal: 20,
    borderRadius: 20,
    marginHorizontal: 5,
  },
  buttonText: { fontSize: 14, fontWeight: "600" },
  aboutBox: {
    backgroundColor: "#f2f2f2",
    margin: 15,
    padding: 15,
    borderRadius: 10,
  },
  aboutText: { fontSize: 14, color: "black", textAlign: "center" },
  sectionTitle: { fontSize: 18, fontWeight: "bold", marginLeft: 15, marginTop: 10 },
  galleryRow: { flexDirection: "row", margin: 10 },
  galleryItem: { width: 150, height: 100, borderRadius: 10, marginRight: 10 },
  fullScreenContainer: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.9)",
    justifyContent: "center",
    alignItems: "center",
  },
  fullScreenImage: { width: "100%", height: "100%" },
  modalOverlay: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0,0,0,0.4)",
  },
  keyboardView: { flex: 1, width: "100%" },
  modalBox: {
    backgroundColor: "#fff",
    padding: 20,
    borderRadius: 15,
    elevation: 5,
    alignItems: "center",
  },
  modalTitle: { fontSize: 18, fontWeight: "bold", marginTop: 30, marginBottom: 15 },
  imagePicker: { alignItems: "center", marginVertical: 10 },
  avatarEdit: { width: 90, height: 90, borderRadius: 45 },
  changePhotoText: { textAlign: "center", color: "#007BFF", marginTop: 5, marginBottom: 10 },
  input: {
    backgroundColor: "#f9f9f9",
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 10,
    padding: 10,
    marginVertical: 5,
    width: "100%",
  },
  inputContainer: { width: "100%", position: "relative" },
  dropdownList: {
    width: "100%",
    backgroundColor: "#fff",
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 10,
    marginTop: -5,
    elevation: 3,
    zIndex: 10,
  },
  dropdownItem: {
    paddingVertical: 12,
    paddingHorizontal: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#eee",
  },
  dropdownItemText: { fontSize: 16, color: "#000" },
  modalButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 15,
    width: "100%",
  },
  saveButton: {
    backgroundColor: "black",
    paddingVertical: 8,
    paddingHorizontal: 25,
    borderRadius: 20,
  },
  saveButtonText: { color: "#fff", fontWeight: "bold" },
  cancelButton: {
    backgroundColor: "#eee",
    paddingVertical: 8,
    paddingHorizontal: 25,
    borderRadius: 20,
  },
  cancelButtonText: { color: "black", fontWeight: "bold" },
  placeholderCircle: {
    backgroundColor: "#f0f0f0",
    justifyContent: "center",
    alignItems: "center",
    borderWidth: 1,
    borderColor: "#ddd",
  },
  backgroundPreviewContainer: {
    width: 300,
    height: 100,
    borderRadius: 10,
    overflow: "hidden",
    backgroundColor: "#f0f0f0",
    justifyContent: "center",
    alignItems: "center",
    alignSelf: "center",
  },
  backgroundPreviewImage: { width: "100%", height: "100%" },
});

