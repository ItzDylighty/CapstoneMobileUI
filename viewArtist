import React, { useState, useCallback, useEffect } from "react";
import { View, Text, Image, StyleSheet, TouchableOpacity, ScrollView, Modal, TextInput, Platform, KeyboardAvoidingView, TouchableWithoutFeedback, Keyboard, Alert, BackHandler, RefreshControl, SafeAreaView } from "react-native";
import * as ImagePicker from "expo-image-picker";
import { useFocusEffect, useLocalSearchParams, useRouter } from "expo-router";
import AsyncStorage from "@react-native-async-storage/async-storage";
import DateTimePicker from "@react-native-community/datetimepicker";
import Header from "../components/Header";
import Icon from "react-native-vector-icons/FontAwesome";
import { Ionicons } from '@expo/vector-icons';
import { supabase } from "../../supabase/supabaseClient";

const API_BASE = "http://192.168.254.114:3000/api";
const API_ORIGIN = API_BASE.replace(/\/api$/, "");

export default function ProfileScreen() {
  const router = useRouter();
  // Params when navigated from artists.js
  const { id: paramId, username: paramUsername, name: paramName } = useLocalSearchParams();
  const viewedId = paramId ? String(paramId) : (paramUsername ? String(paramUsername) : null);
  const isViewingOther = !!viewedId;
  const [firstName, setFirstName] = useState("");
  const [middleName, setMiddleName] = useState("");
  const [lastName, setLastName] = useState("");
  const [userNameField, setUserNameField] = useState("");
  const [username, setUsername] = useState("");
  const [sex, setSex] = useState("");
  const [birthday, setBirthday] = useState(new Date());
  const [address, setAddress] = useState("");
  const [bio, setBio] = useState("");
  const [about, setAbout] = useState("");
  const [image, setImage] = useState(null);
  const [backgroundImage, setBackgroundImage] = useState(null);
  const [selectedArt, setSelectedArt] = useState(null);
  const [accessToken, setAccessToken] = useState(null);
  const [refreshToken, setRefreshToken] = useState(null);
  const [galleryImages, setGalleryImages] = useState([]);
  const [role, setRole] = useState(null);

  // Artwork upload modal state
  const [artModalVisible, setArtModalVisible] = useState(false);
  const [artImage, setArtImage] = useState(null); // { uri }
  const [artTitle, setArtTitle] = useState("");
  const [artDescription, setArtDescription] = useState("");
  const [artMedium, setArtMedium] = useState("");
  const [artUploading, setArtUploading] = useState(false);

  // Artwork interactions (likes/comments)
  const [artComments, setArtComments] = useState([]);
  const [artLikesCount, setArtLikesCount] = useState(0);
  const [artUserLiked, setArtUserLiked] = useState(false);
  const [artNewComment, setArtNewComment] = useState("");
  const [descriptionExpanded, setDescriptionExpanded] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const [currentUserId, setCurrentUserId] = useState(null);
  const [viewedUserId, setViewedUserId] = useState(null);

  // Edit artwork modal state
  const [editModalVisible, setEditModalVisible] = useState(false);
  const [editingArt, setEditingArt] = useState(null);
  const [editArtImage, setEditArtImage] = useState(null);
  const [editArtTitle, setEditArtTitle] = useState("");
  const [editArtDescription, setEditArtDescription] = useState("");
  const [editArtMedium, setEditArtMedium] = useState("");
  const [editArtUploading, setEditArtUploading] = useState(false);

  // Android hardware back: always go back to artists.js
  useEffect(() => {
    const sub = BackHandler.addEventListener('hardwareBackPress', () => {
      router.replace('/(drawer)/artists');
      return true;
    });
    return () => sub.remove();
  }, [router]);

  // View-only fetch helpers (by artist id)
  const fetchViewedProfile = async (at, rt) => {
    try {
      if (!viewedId) return;
      const endpoint = `${API_BASE}/artist/getArtistById/${encodeURIComponent(viewedId)}`;
      const res = await fetch(endpoint, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json', Cookie: `access_token=${at || ''}; refresh_token=${rt || ''}` },
      });
      if (!res.ok) return;
      const { profile } = await res.json();
      const resolveUrl = (u) => (!u ? null : (u.startsWith('http') ? u : `${API_ORIGIN}${u}`));
      const avatarUrl = resolveUrl(profile?.profilePicture);
      const coverUrl = resolveUrl(profile?.coverPicture);
      setFirstName(profile?.firstName || "");
      setMiddleName(profile?.middleName || "");
      setLastName(profile?.lastName || "");
      setUsername(profile?.username || paramName || "");
      setSex(profile?.sex || profile?.gender || "");
      setAddress(profile?.address || "");
      setBio(profile?.bio || "");
      setAbout(profile?.about || "");
      const bday = profile?.birthday || profile?.birthdate;
      if (bday) setBirthday(new Date(bday));
      setImage(avatarUrl ? { uri: avatarUrl } : null);
      setBackgroundImage(coverUrl ? { uri: coverUrl } : null);
      // Store viewed user's ID for comparison - try multiple field names
      const vUserId = profile?.userId || profile?.user_id || profile?.id || profile?.artistId || null;
      setViewedUserId(vUserId);
      console.log('[viewArtist] Viewed artist userId:', vUserId);
      console.log('[viewArtist] Full profile data:', profile);
    } catch {}
  };

  const fetchViewedGallery = async (at, rt) => {
    try {
      if (!viewedId) {
        setGalleryImages([]);
        return;
      }
      const res = await fetch(`${API_BASE}/artist/getArts/${encodeURIComponent(viewedId)}`, {
        method: 'GET',
        headers: { Cookie: `access_token=${at || ''}; refresh_token=${rt || ''}` },
      });
      if (!res.ok) {
        console.log('[viewArtist] fetchViewedGallery failed:', res.status);
        setGalleryImages([]);
        return;
      }
      const data = await res.json();
      console.log('[viewArtist] fetchViewedGallery data:', data);
      const list = Array.isArray(data) ? data : (data?.arts || data || []);
      const items = list.map((a) => {
        // Image is stored as JSONB array, extract first URL
        let imageUrl = null;
        if (Array.isArray(a?.image) && a.image.length > 0) {
          imageUrl = a.image[0];
          
          // Handle double-encoded JSON strings (e.g., "[\"url\"]" instead of "url")
          if (typeof imageUrl === 'string' && imageUrl.startsWith('[')) {
            try {
              const parsed = JSON.parse(imageUrl);
              if (Array.isArray(parsed) && parsed.length > 0) {
                imageUrl = parsed[0];
              }
            } catch (e) {
              console.log('[viewArtist] Failed to parse double-encoded image:', imageUrl);
            }
          }
        } else if (typeof a?.image === 'string') {
          imageUrl = a.image;
        }
        
        // Make URL absolute if needed and validate
        let abs = null;
        if (imageUrl) {
          imageUrl = String(imageUrl).trim().replace(/^"+|"+$/g, '');
          
          if (imageUrl.startsWith('http')) {
            abs = imageUrl;
          } else if (imageUrl.startsWith('/')) {
            abs = `${API_ORIGIN}${imageUrl}`;
          } else {
            abs = `${API_ORIGIN}/${imageUrl}`;
          }
        }
        
        return {
          id: a?.artId || a?.id || null,
          image: abs,
          title: a?.title || null,
          description: a?.description || null,
          medium: a?.medium || null,
          timestamp: a?.timestamp || a?.datePosted || null,
        };
      }).filter(x => !!x.image);
      console.log('[viewArtist] Filtered gallery items:', items.length);
      setGalleryImages(items);
    } catch (err) {
      setGalleryImages([]);
    }
  };

  // Function to upload artwork image to the backend and refresh gallery
  const uploadArtwork = async (imageUri, meta = {}) => {
    try {
      let at = accessToken;
      let rt = refreshToken;
      if (!at || !rt) {
        const { data } = await supabase.auth.getSession();
        at = data?.session?.access_token || at;
        rt = data?.session?.refresh_token || rt;
        if (at) setAccessToken(at);
        if (rt) setRefreshToken(rt);
      }
      const fd = new FormData();
      fd.append("images", { uri: imageUri, name: "artwork.jpg", type: "image/jpeg" });
      if (meta.title != null) fd.append("title", String(meta.title));
      if (meta.description != null) fd.append("description", String(meta.description));
      if (meta.medium != null) fd.append("medium", String(meta.medium));
      const res = await fetch(`${API_BASE}/profile/uploadArt`, {
        method: "POST",
        headers: { Cookie: `access_token=${at}; refresh_token=${rt}` },
        body: fd,
      });
      if (!res.ok) {
        let msg = res.statusText;
        try {
          const bodyText = await res.text();
          try {
            const bodyJson = bodyText ? JSON.parse(bodyText) : null;
            msg = bodyJson?.error || bodyJson?.message || bodyText || msg;
          } catch (_) { msg = bodyText || msg; }
        } catch (_) {}
        throw new Error(`Upload failed (${res.status}): ${msg}`);
      }
      await fetchGallery(at, rt);
    } catch (err) {
      alert("Failed to upload artwork");
    }
  };

  useEffect(() => {
    const load = async () => {
      if (!selectedArt?.id) return;
      setDescriptionExpanded(false); // Reset description state
      await Promise.all([fetchArtReacts(selectedArt.id), fetchArtComments(selectedArt.id)]);
    };
    load();
  }, [selectedArt]);

  const fetchArtReacts = async (artId) => {
    try {
      let at = accessToken, rt = refreshToken;
      if (!at || !rt) {
        const { data } = await supabase.auth.getSession();
        at = data?.session?.access_token || at;
        rt = data?.session?.refresh_token || rt;
      }
      const res = await fetch(`${API_BASE}/profile/getReact?artId=${artId}`, {
        method: "GET",
        headers: { Cookie: `access_token=${at}; refresh_token=${rt}` },
      });
      if (!res.ok) return;
      const bodyText = await res.text();
      let data = null;
      try { data = bodyText ? JSON.parse(bodyText) : null; } catch { data = null; }
      const reactions = data?.reactions || [];
      setArtLikesCount(reactions.length || 0);
      const session = await supabase.auth.getSession();
      const uid = session?.data?.session?.user?.id;
      setArtUserLiked(!!reactions.find(r => r.userId === uid));
    } catch {}
  };

  const fetchArtComments = async (artId) => {
    try {
      let at = accessToken, rt = refreshToken;
      if (!at || !rt) {
        const { data } = await supabase.auth.getSession();
        at = data?.session?.access_token || at;
        rt = data?.session?.refresh_token || rt;
      }
      const res = await fetch(`${API_BASE}/profile/getComments?artId=${artId}`, {
        method: "GET",
        headers: { Cookie: `access_token=${at}; refresh_token=${rt}` },
      });
      if (!res.ok) return;
      const json = await res.json();
      setArtComments(json?.comments || []);
    } catch {}
  };

  const fetchArtViewCount = async (artId) => {
    try {
      let at = accessToken, rt = refreshToken;
      if (!at || !rt) {
        const { data } = await supabase.auth.getSession();
        at = data?.session?.access_token || at;
        rt = data?.session?.refresh_token || rt;
      }
      console.log('[viewArtist] Fetching view count for artId:', artId);
      const res = await fetch(`${API_BASE}/gallery/views?galleryArtId=${artId}`, {
        method: "GET",
        headers: { Cookie: `access_token=${at}; refresh_token=${rt}` },
      });
      console.log('[viewArtist] View count response status:', res.status);
      if (!res.ok) {
        const errorText = await res.text();
        console.log('[viewArtist] fetchArtViewCount failed:', res.status, errorText);
        setArtViewCount(0);
        return;
      }
      const data = await res.json();
      console.log('[viewArtist] View count data:', data);
      setArtViewCount(data?.viewCount || 0);
    } catch (err) {
      console.error('[viewArtist] fetchArtViewCount error:', err);
      setArtViewCount(0);
    }
  };

  const handleToggleArtLike = async () => {
    if (!selectedArt?.id) return;
    const prevLiked = artUserLiked;
    const prevCount = artLikesCount;
    setArtUserLiked(!prevLiked);
    setArtLikesCount(prevLiked ? Math.max(0, prevCount - 1) : prevCount + 1);
    try {
      let at = accessToken, rt = refreshToken;
      if (!at || !rt) {
        const { data } = await supabase.auth.getSession();
        at = data?.session?.access_token || at;
        rt = data?.session?.refresh_token || rt;
      }
      const res = await fetch(`${API_BASE}/profile/createReact`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Cookie: `access_token=${at}; refresh_token=${rt}`,
        },
        body: JSON.stringify({ artId: selectedArt.id }),
      });
      if (!res.ok) throw new Error('react failed');
      await fetchArtReacts(selectedArt.id);
    } catch {
      setArtUserLiked(prevLiked);
      setArtLikesCount(prevCount);
    }
  };

  const postArtComment = async () => {
    if (!selectedArt?.id || !artNewComment.trim()) return;
    const text = artNewComment.trim();
    setArtNewComment("");
    try {
      let at = accessToken, rt = refreshToken;
      if (!at || !rt) {
        const { data } = await supabase.auth.getSession();
        at = data?.session?.access_token || at;
        rt = data?.session?.refresh_token || rt;
      }
      const res = await fetch(`${API_BASE}/profile/createComment`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Cookie: `access_token=${at}; refresh_token=${rt}`,
        },
        body: JSON.stringify({ artId: selectedArt.id, text }),
      });
      if (!res.ok) throw new Error('comment failed');
      await fetchArtComments(selectedArt.id);
    } catch {}
  };

  const formattedDate = birthday ? birthday.toLocaleDateString("en-US", { year: "numeric", month: "long", day: "numeric" }) : "";

  // Only artists/admin can upload artwork
  const handleAddImage = async () => {
    if (isViewingOther) return;
    const r = String(role || '').toLowerCase();
    if (!(r === 'artist' || r === 'admin')) {
      Alert.alert('Not allowed', 'Only artists can upload artworks.');
      return;
    }
    setArtImage(null);
    setArtTitle("");
    setArtDescription("");
    setArtMedium("");
    setArtModalVisible(true);
  };

  const pickArtworkImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });
    if (!result.canceled) {
      setArtImage({ uri: result.assets[0].uri });
    }
  };

  const submitArtwork = async () => {
    try {
      if (!artImage?.uri) {
        alert("Please select an artwork image.");
        return;
      }
      setArtUploading(true);
      await uploadArtwork(artImage.uri, { title: artTitle, description: artDescription, medium: artMedium });
      setArtModalVisible(false);
    } finally {
      setArtUploading(false);
    }
  };

  // Open edit modal with artwork data
  const handleEditArtwork = (art) => {
    setEditingArt(art);
    setEditArtTitle(art.title || '');
    setEditArtDescription(art.description || '');
    setEditArtMedium(art.medium || '');
    setEditArtImage(null); // Don't pre-populate, let user choose new image
    setSelectedArt(null); // Close detail modal
    setEditModalVisible(true);
  };

  // Pick new image for edit
  const pickEditArtworkImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });
    if (!result.canceled) {
      setEditArtImage({ uri: result.assets[0].uri });
    }
  };

  // Submit edited artwork
  const submitEditArtwork = async () => {
    try {
      if (!editArtTitle.trim()) {
        Alert.alert('Error', 'Please enter a title');
        return;
      }
      if (!editingArt?.id) {
        Alert.alert('Error', 'Invalid artwork');
        return;
      }

      setEditArtUploading(true);

      let at = accessToken;
      let rt = refreshToken;
      if (!at || !rt) {
        const { data } = await supabase.auth.getSession();
        at = data?.session?.access_token || at;
        rt = data?.session?.refresh_token || rt;
      }

      const formData = new FormData();
      
      // Add text fields
      formData.append('title', editArtTitle);
      formData.append('description', editArtDescription);
      formData.append('medium', editArtMedium);

      // Handle images based on whether user selected a new one
      if (editArtImage?.uri) {
        // New image selected - upload it
        formData.append('images', {
          uri: editArtImage.uri,
          name: 'artwork.jpg',
          type: 'image/jpeg',
        });
        // Mark old image for removal (append individually, not as JSON string)
        if (editingArt.image) {
          formData.append('imagesToRemove', editingArt.image);
        }
      } else {
        // No new image selected - keep existing image (append individually)
        if (editingArt.image) {
          formData.append('existingImages', editingArt.image);
        }
      }

      const res = await fetch(`${API_BASE}/profile/art/${editingArt.id}`, {
        method: 'PUT',
        headers: {
          Cookie: `access_token=${at}; refresh_token=${rt}`,
        },
        body: formData,
      });

      if (!res.ok) {
        const errText = await res.text();
        throw new Error(errText || 'Update failed');
      }

      Alert.alert('Success', 'Artwork updated successfully!');
      setEditModalVisible(false);
      setEditingArt(null);
      // Refresh appropriate gallery
      if (isViewingOther) {
        await fetchViewedGallery(at, rt);
      } else {
        await fetchGallery(at, rt);
      }
    } catch (err) {
      console.error('Edit artwork error:', err);
      Alert.alert('Error', err.message || 'Failed to update artwork');
    } finally {
      setEditArtUploading(false);
    }
  };

  // Delete artwork
  const handleDeleteArtwork = (art) => {
    Alert.alert(
      'Delete Artwork',
      'Are you sure you want to delete this artwork? This action cannot be undone.',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            try {
              let at = accessToken;
              let rt = refreshToken;
              if (!at || !rt) {
                const { data } = await supabase.auth.getSession();
                at = data?.session?.access_token || at;
                rt = data?.session?.refresh_token || rt;
              }

              const res = await fetch(`${API_BASE}/profile/art/${art.id}`, {
                method: 'DELETE',
                headers: {
                  Cookie: `access_token=${at}; refresh_token=${rt}`,
                },
              });

              if (!res.ok) {
                const errText = await res.text();
                throw new Error(errText || 'Delete failed');
              }

              Alert.alert('Success', 'Artwork deleted successfully!');
              setSelectedArt(null); // Close modal
              // Refresh appropriate gallery
              if (isViewingOther) {
                await fetchViewedGallery(at, rt);
              } else {
                await fetchGallery(at, rt);
              }
            } catch (err) {
              console.error('Delete artwork error:', err);
              Alert.alert('Error', err.message || 'Failed to delete artwork');
            }
          },
        },
      ]
    );
  };

  const fetchRole = async (at, rt) => {
    try {
      const res = await fetch(`${API_BASE}/users/role`, {
        method: "GET",
        credentials: "include",
        headers: { Cookie: `access_token=${at}; refresh_token=${rt}` },
      });
      if (!res.ok) throw new Error(`Failed to fetch role: ${res.status} ${res.statusText}`);
      const bodyText = await res.text();
      let data = null;
      try { data = bodyText ? JSON.parse(bodyText) : null; } catch (_) { data = bodyText; }
      const resolvedRole = typeof data === "string" ? data : (data?.role || data?.user?.role || data?.data?.role || data?.profile?.role || null);
      setRole(resolvedRole);
      return resolvedRole;
    } catch {
      setRole(null);
      return null;
    }
  };

  useEffect(() => {
    const init = async () => {
      try {
        const { data } = await supabase.auth.getSession();
        const at = data?.session?.access_token || null;
        const rt = data?.session?.refresh_token || null;
        const userId = data?.session?.user?.id || null;
        setAccessToken(at);
        setRefreshToken(rt);
        setCurrentUserId(userId);
        console.log('[viewArtist] Current user ID:', userId);
        
        // Always fetch role for button visibility checks
        let userRole = null;
        if (at && rt) {
          userRole = await fetchRole(at, rt);
          console.log('[viewArtist] Fetched user role:', userRole);
        }
        
        if (isViewingOther && at && rt) {
          // Load selected artist by id
          await fetchViewedProfile(at, rt);
          await fetchViewedGallery(at, rt);
        } else if (at && rt) {
          await fetchProfile(at, rt);
          const r = String(userRole || '').toLowerCase();
          if (r === 'artist' || r === 'admin') {
            await fetchGallery(at, rt);
          } else {
            setGalleryImages([]);
          }
        } else {
          await fetchSupabaseProfile();
        }
      } catch {}
    };
    init();
  }, [isViewingOther, viewedId]);

  // Debug: Log button visibility conditions
  useEffect(() => {
    console.log('[viewArtist] ======= BUTTON VISIBILITY CHECK =======');
    console.log('[viewArtist] currentUserId:', currentUserId);
    console.log('[viewArtist] viewedUserId:', viewedUserId);
    console.log('[viewArtist] isViewingOther:', isViewingOther);
    console.log('[viewArtist] role:', role);
    console.log('[viewArtist] IDs match:', currentUserId === viewedUserId);
    console.log('[viewArtist] Is artist/admin:', role === 'artist' || role === 'admin');
    console.log('[viewArtist] shouldShow:', currentUserId && ((isViewingOther && currentUserId === viewedUserId) || (!isViewingOther)) && (role === 'artist' || role === 'admin'));
    console.log('[viewArtist] ======================================');
  }, [currentUserId, viewedUserId, isViewingOther, role]);

  const fetchSupabaseProfile = async () => {
    try {
      const { data: { user }, error } = await supabase.auth.getUser();
      if (error) throw error;
      if (!user) return;
      const { data: profile, error: profileError } = await supabase
        .from("profiles")
        .select("*")
        .eq("id", user.id)
        .single();
      if (profileError) throw profileError;
      setFirstName(profile.first_name || "");
      setMiddleName(profile.middle_name || "");
      setLastName(profile.last_name || "");
      setUsername(profile.username || "");
      setUserNameField(profile.username || "");
      setSex(profile.sex || "");
      setAddress(profile.address || "");
      setBio(profile.bio || "");
      setAbout(profile.about || "");
      if (profile.birthday) {
        const parsed = new Date(profile.birthday);
        setBirthday(parsed);
        await AsyncStorage.setItem("userBirthday", parsed.toISOString());
      }
    } catch {}
  };

  const getInitials = () => {
    const parts = [firstName, middleName, lastName].filter(Boolean);
    let base = parts.join(" ");
    if (!base && username) base = username;
    if (!base) return "";
    const tokens = base.trim().split(/\s+/);
    return tokens.slice(0, 2).map((t) => t[0]?.toUpperCase()).join("");
  };

  const fetchProfile = async (at = accessToken, rt = refreshToken) => {
    try {
      const res = await fetch(`${API_BASE}/profile/getProfile`, {
        method: "GET",
        headers: { "Content-Type": "application/json", Cookie: `access_token=${at}; refresh_token=${rt}` },
      });
      if (!res.ok) throw new Error(`Failed to fetch profile (${res.status})`);
      const data = await res.json();
      const p = data?.profile ?? data;
      setFirstName(p.firstName || "");
      setMiddleName(p.middleName || "");
      setLastName(p.lastName || "");
      setUserNameField(p.username || "");
      setUsername(p.username || "");
      setSex(p.sex || "");
      setAddress(p.address || "");
      setBio(p.bio || "");
      setAbout(p.about || "");
      const fetchedBday = p.birthday || p.birthdate;
      if (fetchedBday) {
        const parsedDate = new Date(fetchedBday);
        setBirthday(parsedDate);
        await AsyncStorage.setItem("userBirthday", parsedDate.toISOString());
      }
      const resolveUrl = (u) => {
        if (!u) return null;
        return u.startsWith("http") ? u : `${API_ORIGIN}${u}`;
      };
      const avatarUrl = resolveUrl(p.profilePicture);
      const coverUrl = resolveUrl(p.coverPicture);
      setImage(avatarUrl ? { uri: avatarUrl } : null);
      setBackgroundImage(coverUrl ? { uri: coverUrl } : null);
      // Store own userId for comparison
      setViewedUserId(p.userId || currentUserId);
    } catch {
      await fetchSupabaseProfile();
    }
  };

  const fetchGallery = async (at = accessToken, rt = refreshToken) => {
    try {
      const res = await fetch(`${API_BASE}/profile/getArts`, {
        method: "GET",
        headers: { Cookie: `access_token=${at}; refresh_token=${rt}` },
      });
      if (!res.ok) {
        console.log('[viewArtist] fetchGallery failed:', res.status);
        setGalleryImages([]);
        return;
      }
      const data = await res.json();
      console.log('[viewArtist] fetchGallery data:', data);
      const list = Array.isArray(data) ? data : (data?.arts || data || []);
      const items = list.map((a) => {
        // Image is stored as JSONB array, extract first URL
        let imageUrl = null;
        if (Array.isArray(a?.image) && a.image.length > 0) {
          imageUrl = a.image[0];
          
          // Handle double-encoded JSON strings (e.g., "[\"url\"]" instead of "url")
          if (typeof imageUrl === 'string' && imageUrl.startsWith('[')) {
            try {
              const parsed = JSON.parse(imageUrl);
              if (Array.isArray(parsed) && parsed.length > 0) {
                imageUrl = parsed[0];
              }
            } catch (e) {
              console.log('[viewArtist] Failed to parse double-encoded image:', imageUrl);
            }
          }
        } else if (typeof a?.image === 'string') {
          imageUrl = a.image;
        }
        
        // Make URL absolute if needed and validate
        let abs = null;
        if (imageUrl) {
          imageUrl = String(imageUrl).trim().replace(/^"+|"+$/g, '');
          
          if (imageUrl.startsWith("http")) {
            abs = imageUrl;
          } else if (imageUrl.startsWith("/")) {
            abs = `${API_ORIGIN}${imageUrl}`;
          } else {
            abs = `${API_ORIGIN}/${imageUrl}`;
          }
        }
        
        return {
          id: a?.artId || a?.id || null,
          image: abs,
          title: a?.title || null,
          description: a?.description || null,
          medium: a?.medium || null,
          timestamp: a?.timestamp || a?.datePosted || null,
        };
      }).filter(x => !!x.image);
      console.log('[viewArtist] Filtered own gallery items:', items.length);
      setGalleryImages(items);
    } catch (err) {
      console.log('[viewArtist] fetchGallery error:', err);
      setGalleryImages([]);
    }
  };

  useFocusEffect(
    useCallback(() => {
      if (isViewingOther) return; // when viewing another artist, avoid overwriting their data
      fetchProfile();
      const r = String(role || '').toLowerCase();
      if (accessToken && refreshToken && (r === 'artist' || r === 'admin')) {
        fetchGallery(accessToken, refreshToken);
      } else if (accessToken && refreshToken) {
        setGalleryImages([]);
      }
    }, [isViewingOther, role, accessToken, refreshToken])
  );

  // Pull to refresh handler
  const onRefresh = async () => {
    setRefreshing(true);
    try {
      if (isViewingOther) {
        // Refresh viewed artist's profile and gallery
        await Promise.all([
          fetchViewedProfile(accessToken, refreshToken),
          fetchViewedGallery(accessToken, refreshToken)
        ]);
      } else {
        // Refresh own profile and gallery
        const r = String(role || '').toLowerCase();
        if (r === 'artist' || r === 'admin') {
          await Promise.all([
            fetchProfile(accessToken, refreshToken),
            fetchGallery(accessToken, refreshToken)
          ]);
        } else {
          await fetchProfile(accessToken, refreshToken);
        }
      }
    } catch (err) {
      console.error('Refresh error:', err);
    } finally {
      setRefreshing(false);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <Header title="Artists" showSearch={false} />
      <ScrollView 
        style={styles.scrollContent}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={['#000']} // Android
            tintColor="#000" // iOS
          />
        }
      >

      <View style={styles.profileSection}>
        {backgroundImage ? (
          <Image source={backgroundImage} style={styles.backgroundImage} />
        ) : (
          <Image source={require("../../assets/pic1.jpg")} style={styles.backgroundImage} />
        )}

        <View style={styles.avatarContainer}>
          {image ? (
            <Image source={image} style={styles.avatar} />
          ) : (
            <View style={[styles.avatar, { backgroundColor: "#dfe3e8", justifyContent: 'center', alignItems: 'center' }]}>
              {getInitials() ? (
                <Text style={{ fontSize: 32, fontWeight: "bold", color: "#555" }}> {getInitials()} </Text>
              ) : (
                <Icon name="user" size={50} color="#999" />
              )}
            </View>
          )}
        </View>
        <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'center', marginTop: -30 }}>
          <Text style={[styles.name, { marginTop: 0 }]}>{username || "Username"}</Text>
          <Ionicons name="checkmark-circle" size={20} color="#1DA1F2" style={{ marginLeft: 6 }} />
        </View>
        <View style={styles.infoContainer}>
          <Text style={styles.detail}><Text style={styles.detailLabel}>Name:</Text> {[firstName, middleName, lastName].filter(Boolean).join(' ') || "Not set"}</Text>
          <Text style={styles.detail}><Text style={styles.detailLabel}>Gender:</Text> {sex || "Not set"}</Text>
          <Text style={styles.detail}><Text style={styles.detailLabel}>Birthdate:</Text> {formattedDate || "Not set"}</Text>
          <Text style={styles.detail}><Text style={styles.detailLabel}>Address:</Text> {address}</Text>
          <Text style={styles.detail}><Text style={styles.detailLabel}>Bio:</Text> {bio}</Text>
        </View>

        <View style={styles.infoContainer}>
          <Text style={styles.detail}><Text style={styles.detailLabel}>About:</Text> {about}</Text>
        </View>
      </View>

      {/* Artwork Galleries - horizontal, view-only (no add button) - only show if artworks exist */}
      {galleryImages.length > 0 && (
        <>
          <View style={styles.artworkHeaderContainer}>
            <Text style={[styles.sectionTitle, { marginTop: 0, marginBottom: 0, marginHorizontal: 0 }]}>Artist's Portfolio</Text>
            <View style={styles.artworkBadge}>
              <Text style={styles.artworkBadgeText}>
                {galleryImages.length} {galleryImages.length === 1 ? 'piece' : 'pieces'}
              </Text>
            </View>
          </View>
          <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.galleryRow}>
            {galleryImages.map((art, index) => (
              <TouchableOpacity key={index} onPress={() => setSelectedArt(art)} style={{ marginRight: 10 }}>
                <Image source={{ uri: art.image }} style={styles.galleryItem} />
              </TouchableOpacity>
            ))}
          </ScrollView>
        </>
      )}

      {/* Artwork Details Modal */}
      <Modal visible={selectedArt !== null} transparent animationType="fade" onRequestClose={() => setSelectedArt(null)}>
        <View style={styles.fullScreenContainer}>
          <View style={{ width: '90%', maxHeight: '85%', backgroundColor: '#fff', borderRadius: 12, overflow: 'hidden' }}>
            {/* Explicit close button */}
            <TouchableOpacity onPress={() => setSelectedArt(null)} style={styles.modalCloseButton}>
              <Ionicons name="close" size={24} color="white" />
            </TouchableOpacity>
            
            {/* Fixed Image at top */}
            {selectedArt?.image && (
              <Image source={{ uri: selectedArt.image }} style={styles.artModalImage} />
            )}
            
            {/* Scrollable content below image */}
            <ScrollView
              contentContainerStyle={{ paddingBottom: 16 }}
              decelerationRate={Platform.OS === 'ios' ? 'fast' : 0.98}
              scrollEventThrottle={16}
              showsVerticalScrollIndicator
              nestedScrollEnabled
            >
              <View style={{ padding: 12 }}>
                
                {/* Row 1: Username and Heart */}
                <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginBottom: 8 }}>
                  <Text style={{ fontSize: 18, fontWeight: 'bold' }}>{username || 'Artist'}</Text>
                  <TouchableOpacity onPress={handleToggleArtLike} style={{ flexDirection: 'row', alignItems: 'center', paddingVertical: 6, paddingHorizontal: 12, backgroundColor: '#f5f5f5', borderRadius: 20 }}>
                    <Icon name={artUserLiked ? 'heart' : 'heart-o'} size={22} color={artUserLiked ? 'red' : '#555'} />
                    <Text style={{ marginLeft: 8, fontWeight: '600' }}>{artLikesCount}</Text>
                  </TouchableOpacity>
                </View>

                {/* Row 2: By: Fullname and Action Buttons */}
                <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginBottom: 12 }}>
                  <Text style={{ fontSize: 14, color: '#666' }}>
                    by: {[firstName, middleName, lastName].filter(Boolean).join(' ') || username || 'Unknown'}
                  </Text>
                  
                  {/* Edit/Delete buttons - only show if current user is the artist owner or admin */}
                  {currentUserId && ((isViewingOther && currentUserId === viewedUserId) || (!isViewingOther)) && (role === 'artist' || role === 'admin') && (
                    <View style={{ flexDirection: 'row', gap: 8 }}>
                      <TouchableOpacity 
                        onPress={() => handleEditArtwork(selectedArt)} 
                        style={{ backgroundColor: '#A68C7B', paddingVertical: 8, paddingHorizontal: 14, borderRadius: 6, flexDirection: 'row', alignItems: 'center' }}
                      >
                        <Ionicons name="pencil" size={14} color="#fff" />
                        <Text style={{ color: '#fff', marginLeft: 6, fontSize: 12, fontWeight: '600' }}>Edit</Text>
                      </TouchableOpacity>
                      <TouchableOpacity 
                        onPress={() => handleDeleteArtwork(selectedArt)} 
                        style={{ backgroundColor: '#d9534f', paddingVertical: 8, paddingHorizontal: 14, borderRadius: 6, flexDirection: 'row', alignItems: 'center' }}
                      >
                        <Ionicons name="trash" size={14} color="#fff" />
                        <Text style={{ color: '#fff', marginLeft: 6, fontSize: 12, fontWeight: '600' }}>Delete</Text>
                      </TouchableOpacity>
                    </View>
                  )}

                  {/* Report button - show for users viewing other people's artwork */}
                  {currentUserId && !(currentUserId && ((isViewingOther && currentUserId === viewedUserId) || (!isViewingOther)) && (role === 'artist' || role === 'admin')) && (
                    <TouchableOpacity 
                      onPress={() => Alert.alert('Report', 'Report functionality coming soon')} 
                      style={{ backgroundColor: '#A68C7B', paddingVertical: 8, paddingHorizontal: 14, borderRadius: 6, flexDirection: 'row', alignItems: 'center' }}
                    >
                      <Ionicons name="flag" size={14} color="#fff" />
                      <Text style={{ color: '#fff', marginLeft: 6, fontSize: 12, fontWeight: '600' }}>Report</Text>
                    </TouchableOpacity>
                  )}
                </View>

                {/* Medium */}
                {!!selectedArt?.medium && (
                  <View style={{ marginBottom: 12 }}>
                    <Text style={{ fontSize: 14, fontWeight: '600', color: '#555', marginBottom: 4 }}>Medium:</Text>
                    <Text style={{ fontSize: 14, color: '#222' }}>{selectedArt.medium}</Text>
                  </View>
                )}

                {/* Description */}
                {!!selectedArt?.description && (
                  <View style={{ marginBottom: 8 }}>
                    <Text style={{ fontSize: 14, fontWeight: '600', color: '#555', marginBottom: 4 }}>Description:</Text>
                    <Text style={{ fontSize: 14, color: '#222' }}>
                      {descriptionExpanded || selectedArt.description.length <= 150
                        ? selectedArt.description
                        : `${selectedArt.description.substring(0, 150)}...`}
                    </Text>
                    {selectedArt.description.length > 150 && (
                      <TouchableOpacity onPress={() => setDescriptionExpanded(!descriptionExpanded)} style={{ alignItems: 'center' }}>
                        <Text style={{ fontSize: 14, color: '#A68C7B', fontWeight: '600', marginTop: 4 }}>
                          {descriptionExpanded ? 'View Less' : 'View More'}
                        </Text>
                      </TouchableOpacity>
                    )}
                  </View>
                )}

                {/* Date and time */}
                {!!selectedArt?.timestamp && (
                  <Text style={{ fontSize: 12, color: '#888', marginTop: 8 }}>{selectedArt.timestamp}</Text>
                )}

                <View style={{ height: 1, backgroundColor: '#eee', marginVertical: 10 }} />
                
                {/* Comments Section - Nested ScrollView */}
                <Text style={{ fontSize: 16, fontWeight: '600', marginBottom: 10 }}>Comments</Text>
                <ScrollView
                  style={{ maxHeight: 120 }}
                  keyboardShouldPersistTaps="handled"
                  decelerationRate={Platform.OS === 'ios' ? 'fast' : 0.98}
                  scrollEventThrottle={16}
                  showsVerticalScrollIndicator
                  nestedScrollEnabled
                >
                  {(artComments || []).map((c) => (
                    <View key={c.id} style={{ flexDirection: 'row', marginBottom: 10 }}>
                      <Image source={{ uri: c.user?.avatar }} style={{ width: 32, height: 32, borderRadius: 16, marginRight: 8 }} />
                      <View style={{ flex: 1 }}>
                        <Text style={{ fontWeight: 'bold' }}>{c.user?.name}</Text>
                        <Text>{c.text}</Text>
                        {!!c.timestamp && (<Text style={{ fontSize: 12, color: '#888', marginTop: 2 }}>{c.timestamp}</Text>)}
                      </View>
                    </View>
                  ))}
                </ScrollView>
                <View style={{ flexDirection: 'row', alignItems: 'center', marginTop: 8 }}>
                  <TextInput
                    style={[styles.input, { flex: 1, marginRight: 8 }]}
                    placeholder="Add a comment..."
                    value={artNewComment}
                    onChangeText={setArtNewComment}
                  />
                  <TouchableOpacity onPress={postArtComment} style={styles.saveButton}>
                    <Text style={styles.saveButtonText}>Send</Text>
                  </TouchableOpacity>
                </View>
              </View>
            </ScrollView>
          </View>
        </View>
      </Modal>

      {/* Edit Artwork Modal */}
      <Modal
        visible={editModalVisible}
        animationType="slide"
        transparent
        onRequestClose={() => setEditModalVisible(false)}
      >
        <KeyboardAvoidingView 
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={{ flex: 1 }}
        >
          <View style={styles.uploadModalOverlay}>
            <View style={styles.uploadModalContent}>
              <View style={styles.uploadModalHeader}>
                <Text style={styles.uploadModalTitle}>Edit Artwork</Text>
                <TouchableOpacity onPress={() => setEditModalVisible(false)}>
                  <Ionicons name="close" size={24} color="#333" />
                </TouchableOpacity>
              </View>

              <ScrollView style={styles.uploadModalBody} showsVerticalScrollIndicator={false} keyboardShouldPersistTaps="handled">
                {/* Image Picker */}
                <TouchableOpacity style={styles.uploadImagePicker} onPress={pickEditArtworkImage}>
                  {editArtImage ? (
                    <Image source={editArtImage} style={styles.uploadPickedImage} />
                  ) : (
                    <View style={styles.uploadImagePlaceholder}>
                      <Ionicons name="image-outline" size={48} color="#A68C7B" />
                      <Text style={styles.uploadImageText}>{editingArt ? 'Tap to change image (keep current or select new)' : 'Tap to select image'}</Text>
                    </View>
                  )}
                </TouchableOpacity>

                {/* Title Input */}
                <Text style={styles.uploadInputLabel}>Title *</Text>
                <TextInput
                  style={styles.uploadInput}
                  placeholder="Enter artwork title"
                  value={editArtTitle}
                  onChangeText={setEditArtTitle}
                />

                {/* Medium Input */}
                <Text style={styles.uploadInputLabel}>Medium</Text>
                <TextInput
                  style={styles.uploadInput}
                  placeholder="e.g., Oil, Digital, Watercolor"
                  value={editArtMedium}
                  onChangeText={setEditArtMedium}
                />

                {/* Description Input */}
                <Text style={styles.uploadInputLabel}>Description</Text>
                <TextInput
                  style={[styles.uploadInput, styles.uploadTextArea]}
                  placeholder="Enter description"
                  value={editArtDescription}
                  onChangeText={setEditArtDescription}
                  multiline
                  numberOfLines={4}
                />

                {/* Update Button */}
                <TouchableOpacity
                  style={[styles.uploadButton, editArtUploading && styles.uploadButtonDisabled]}
                  onPress={submitEditArtwork}
                  disabled={editArtUploading}
                >
                  <Text style={styles.uploadButtonText}>
                    {editArtUploading ? 'Updating...' : 'Update Artwork'}
                  </Text>
                </TouchableOpacity>
              </ScrollView>
            </View>
          </View>
        </KeyboardAvoidingView>
      </Modal>

      <Modal visible={artModalVisible} animationType="slide" transparent presentationStyle="overFullScreen" onRequestClose={() => setArtModalVisible(false)}>
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <View style={styles.modalOverlay}>
            <KeyboardAvoidingView behavior={Platform.OS === "ios" ? "padding" : "height"} style={styles.keyboardView}>
              <ScrollView contentContainerStyle={styles.modalBox} keyboardShouldPersistTaps="handled">
                <Text style={styles.modalTitle}>Upload Artwork</Text>
                <TouchableOpacity onPress={pickArtworkImage} style={styles.imagePicker}>
                  {artImage ? (
                    <Image source={artImage} style={styles.artworkPreview} />
                  ) : (
                    <View style={[styles.artworkPreview, styles.placeholderCircle]}>
                      <Icon name="image" size={40} color="#999" />
                    </View>
                  )}
                  <Text style={styles.changePhotoText}>Choose Artwork Image</Text>
                </TouchableOpacity>
                <TextInput style={styles.input} placeholder="Title (optional)" placeholderTextColor="#999" value={artTitle} onChangeText={setArtTitle} />
                <TextInput style={[styles.input, { height: 80 }]} placeholder="Description (optional)" placeholderTextColor="#999" value={artDescription} onChangeText={setArtDescription} multiline />
                <TextInput style={styles.input} placeholder="Medium (e.g., Oil, Digital)" placeholderTextColor="#999" value={artMedium} onChangeText={setArtMedium} />
                <View style={styles.modalButtons}>
                  <TouchableOpacity style={styles.cancelButton} onPress={() => setArtModalVisible(false)} disabled={artUploading}>
                    <Text style={styles.cancelButtonText}>Cancel</Text>
                  </TouchableOpacity>
                  <TouchableOpacity style={styles.saveButton} onPress={submitArtwork} disabled={artUploading}>
                    <Text style={styles.saveButtonText}>{artUploading ? "Uploading..." : "Upload"}</Text>
                  </TouchableOpacity>
                </View>
              </ScrollView>
            </KeyboardAvoidingView>
          </View>
        </TouchableWithoutFeedback>
      </Modal>
      </ScrollView>
    </SafeAreaView>
  );
}

// All needed style (removed styles for profile/apply modals and buttons for them)
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#fff" },
  scrollContent: { flex: 1 },
  profileSection: { alignItems: "center", marginTop: 10, padding: 0 },
  backgroundImage: { width: "100%", height: 150, borderTopLeftRadius: 15, borderTopRightRadius: 15, resizeMode: "cover", marginBottom: -50 },
  avatarContainer: { position: "relative", top: -50, alignItems: "center" },
  avatar: { width: 100, height: 100, borderRadius: 50, borderWidth: 3, borderColor: "#fff" },
  name: { fontSize: 20, fontWeight: "bold", marginTop: -30 },
  detail: { fontSize: 14, color: "#000", textAlign: "center", marginVertical: 2 },
  detailLabel: { color: "#A68C7B", fontWeight: "600" },
  infoContainer: {
    backgroundColor: "#f9f9f9",
    borderWidth: 1,
    borderColor: "#D2AE7E",
    borderRadius: 10,
    padding: 12,
    marginVertical: 10,
    marginHorizontal: 10,
    width: "90%",
  },
  sectionTitle: { fontSize: 18, fontWeight: "bold", marginHorizontal: 15, marginTop: 25, marginBottom: 10 },
  artworkHeaderContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginHorizontal: 15,
    marginTop: 25,
    marginBottom: 10,
  },
  artworkBadge: {
    backgroundColor: '#A68C7B',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    marginLeft: 8,
  },
  artworkBadgeText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  galleryRow: { flexDirection: "row", paddingHorizontal: 10 },
  galleryItem: { width: 100, height: 100, borderRadius: 10 },
  artworkPreview: { width: 120, height: 120, borderRadius: 12, backgroundColor: '#f0f0f0' },
  addImageText: { fontSize: 32, color: "#999" },
  fullScreenContainer: { flex: 1, backgroundColor: "rgba(0,0,0,0.9)", justifyContent: "center", alignItems: "center" },
  artModalImage: { width: '100%', height: 260, resizeMode: 'cover', borderWidth: 3, borderColor: '#fff', borderRadius: 10 },
  // Artwork upload modal (only for artworks, retain styles modalOverlay etc.)
  modalOverlay: { flex: 1, justifyContent: "center", alignItems: "center", backgroundColor: "rgba(0,0,0,0.4)" },
  keyboardView: { flex: 1, width: "100%" },
  modalBox: { backgroundColor: "#fff", padding: 20, borderRadius: 15, elevation: 5, alignItems: "center" },
  modalTitle: { fontSize: 18, fontWeight: "bold", marginTop: 30, marginBottom: 15 },
  imagePicker: { alignItems: "center", marginVertical: 10 },
  placeholderCircle: { backgroundColor: "#f0f0f0", justifyContent: "center", alignItems: "center", borderWidth: 1, borderColor: "#ddd" },
  changePhotoText: { textAlign: "center", color: "#007BFF", marginTop: 5, marginBottom: 10 },
  input: { backgroundColor: "#f9f9f9", borderWidth: 1, borderColor: "#ccc", borderRadius: 10, padding: 10, marginVertical: 5, width: "100%" },
  modalButtons: { flexDirection: "row", justifyContent: "space-between", marginTop: 15, width: "100%" },
  saveButton: { backgroundColor: "#A68C7B", paddingVertical: 8, paddingHorizontal: 25, borderRadius: 20 },
  saveButtonText: { color: "#fff", fontWeight: "bold" },
  cancelButton: { backgroundColor: "#eee", paddingVertical: 8, paddingHorizontal: 25, borderRadius: 20 },
  cancelButtonText: { color: "black", fontWeight: "bold" },
  modalCloseButton: {
    position: 'absolute',
    top: 8,
    right: 8,
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: 'rgba(0,0,0,0.6)',
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 2,
  },
  // Edit modal styles
  uploadModalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'flex-end',
  },
  uploadModalContent: {
    backgroundColor: '#fff',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    maxHeight: '90%',
  },
  uploadModalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  uploadModalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#A68C7B',
  },
  uploadModalBody: {
    padding: 20,
  },
  uploadImagePicker: {
    width: '100%',
    height: 200,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#A68C7B',
    borderStyle: 'dashed',
    marginBottom: 20,
    overflow: 'hidden',
  },
  uploadImagePlaceholder: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f9f9f9',
  },
  uploadImageText: {
    marginTop: 10,
    fontSize: 14,
    color: '#A68C7B',
  },
  uploadPickedImage: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
  },
  uploadInputLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  uploadInput: {
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 8,
    padding: 12,
    fontSize: 14,
    marginBottom: 16,
    backgroundColor: '#fff',
  },
  uploadTextArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  uploadButton: {
    backgroundColor: '#A68C7B',
    paddingVertical: 15,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 10,
    marginBottom: 20,
  },
  uploadButtonDisabled: {
    opacity: 0.6,
  },
  uploadButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
